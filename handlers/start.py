import re

from aiogram import Router
from aiogram import types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from state import UserState
from keyboards.inline.start import get_start_keyboard, get_order_keyboard, get_order_keyboard_user, get_sity_keyboard, \
    get_1_keyboard, get_2_keyboard
from aiogram import F
from bd import Db

router = Router()
bd = Db()
current_index = 0
index = 0
index_1 = 0


@router.message(CommandStart())
async def start(message: types.Message):
    await message.answer(text="<i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!</i>\n<b>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ö–∞–∑–∞–Ω–∏</b>",
                         reply_markup=await get_start_keyboard())


@router.callback_query(F.data == "create_kv")
async def create_order(callback: types.CallbackQuery):
    global current_index
    results = bd.select_home()
    if results:
        result = results[current_index]
        formatted_text = f"üìç <b>–ê–¥—Ä–µ—Å:</b> <i>{result[1]}</i>\n\n{result[4]}\n<b>{result[2]} –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}"
        await callback.message.answer(formatted_text, reply_markup=await get_order_keyboard())
    else:
        await callback.message.answer("No data available")


@router.callback_query(F.data == "next")
async def create_order(callback: types.CallbackQuery):
    global current_index
    current_index += 1
    results = bd.select_home()
    if results and current_index < len(results):
        result = results[current_index]
        formatted_text = f"üìç <b>–ê–¥—Ä–µ—Å:</b> <i>{result[1]}</i>\n\n{result[4]}\n<b>{result[2]} –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}"
        await callback.message.edit_text(formatted_text, reply_markup=await get_order_keyboard())
    else:
        current_index = 0
        results = bd.select_home()
        if results:
            result = results[current_index]
            formatted_text = f"üìç <b>–ê–¥—Ä–µ—Å:</b> <i>{result[1]}</i>\n\n{result[4]}\n<b>{result[2]} –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}"
            await callback.message.edit_text(formatted_text, reply_markup=await get_order_keyboard())
        else:
            await callback.message.edit_text("No data available")


@router.callback_query(F.data == "create_order")
async def create_order(callback: types.CallbackQuery, state: FSMContext):
    message = callback.message.text
    address_pattern = re.compile(r"üìç –ê–¥—Ä–µ—Å: (.+)")
    address_match = address_pattern.search(message)
    if address_match:
        full_address = address_match.group(1).strip()
        await state.update_data(address=full_address)
    else:
        print("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\n\n<i>–ü—Ä–∏–º–µ—Ä: 30.05</i>")
    await state.set_state(UserState.date)


@router.message(UserState.date)
async def floor(msg: types.Message, state: FSMContext):
    date = msg.text
    await state.update_data(date=date)
    username = msg.from_user.username
    user = bd.select_user(username)
    user_result = user[0][0]
    data = await state.get_data()
    address = data['address']
    result = bd.select_home_name(address)
    if result:
        home_id = result[0][0]
        try:
            status = "üïê –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
            bd.insert_into_orders(home_id, user_result, data['date'], status)
            await msg.answer(
                "<b>–ö–≤–∞—Ä—Ç–∏—Ä–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω—å–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>\n\n<i>–°—Ç–∞—Ç—É—Å: üïê –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</i>",
                reply_markup=await get_order_keyboard_user())
            await state.clear()
        except ValueError as e:
            await msg.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä–∞ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        await msg.answer("–î–æ–º —Å —Ç–∞–∫–∏–º –∞–¥—Ä–µ—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")


@router.callback_query(F.data == "my")
async def create_order(callback: types.CallbackQuery, state: FSMContext):
    username = callback.from_user.username
    result = bd.select_orders_by_username(username)
    if result:
        message_text = "<i>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</i>\n"
        for row in result:
            order_id, address, date, status = row
            message_text += f"<b>ID –∑–∞–∫–∞–∑–∞:</b> {order_id}, <b>–ê–¥—Ä–µ—Å:</b> {address}, <b>–î–∞—Ç–∞:</b> {date}, <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
    else:
        message_text = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
    await callback.message.answer(text=message_text)


@router.callback_query(F.data == "support")
async def create_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text="<i>–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ö–∞–∑–∞–Ω–∏</i>",
                                  reply_markup=await get_sity_keyboard())


@router.callback_query(F.data == "1")
async def create_order(callback: types.CallbackQuery, state: FSMContext):
    global index
    results = bd.select_home_by_address("–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π")
    if results:
        result = results[index]
        formatted_text = f"üìç <b>–ê–¥—Ä–µ—Å:</b> <i>{result[1]}</i>\n\n{result[4]}\n<b>{result[2]} –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}"
        await callback.message.answer(formatted_text, reply_markup=await get_1_keyboard())
    else:
        await callback.message.answer("No data available")


@router.callback_query(F.data == "2")
async def create_order(callback: types.CallbackQuery, state: FSMContext):
    global current_index
    results = bd.select_home_by_address("–ù–æ–≤–æ—Å–∞–≤–∏–Ω—Å–∫–∏–π")
    if results:
        result = results[current_index]
        formatted_text = f"üìç <b>–ê–¥—Ä–µ—Å:</b> <i>{result[1]}</i>\n\n{result[4]}\n<b>{result[2]} –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}"
        await callback.message.answer(formatted_text, reply_markup=await get_2_keyboard())
    else:
        await callback.message.answer("No data available")


@router.callback_query(F.data == "next_1")
async def create_order(callback: types.CallbackQuery):
    global index
    index += 1
    results = bd.select_home_by_address("–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π")
    if results and index < len(results):
        result = results[index]
        formatted_text = f"üìç <b>–ê–¥—Ä–µ—Å:</b> <i>{result[1]}</i>\n\n{result[4]}\n<b>{result[2]} –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}"
        await callback.message.edit_text(formatted_text, reply_markup=await get_1_keyboard())
    else:
        index = 0
        results = bd.select_home_by_address("–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π")
        if results:
            result = results[index]
            formatted_text = f"üìç <b>–ê–¥—Ä–µ—Å:</b> <i>{result[1]}</i>\n\n{result[4]}\n<b>{result[2]} –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}"
            await callback.message.edit_text(formatted_text, reply_markup=await get_1_keyboard())
        else:
            await callback.message.edit_text("No data available")

@router.callback_query(F.data == "next_2")
async def create_order(callback: types.CallbackQuery):
    global index_1
    index_1 += 1
    results = bd.select_home_by_address("–ù–æ–≤–æ—Å–∞–≤–∏–Ω—Å–∫–∏–π")
    if results and index_1 < len(results):
        result = results[index_1]
        formatted_text = f"üìç <b>–ê–¥—Ä–µ—Å:</b> <i>{result[1]}</i>\n\n{result[4]}\n<b>{result[2]} –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}"
        await callback.message.edit_text(formatted_text, reply_markup=await get_2_keyboard())
    else:
        index_1 = 0
        results = bd.select_home_by_address("–ù–æ–≤–æ—Å–∞–≤–∏–Ω—Å–∫–∏–π")
        if results:
            result = results[index_1]
            formatted_text = f"üìç <b>–ê–¥—Ä–µ—Å:</b> <i>{result[1]}</i>\n\n{result[4]}\n<b>{result[2]} –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {result[3]}"
            await callback.message.edit_text(formatted_text, reply_markup=await get_2_keyboard())
        else:
            await callback.message.edit_text("No data available")